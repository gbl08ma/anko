// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/gbl08ma/anko/ast"
)

//line parser.go.y:40
type yySymType struct {
	yys                 int
	compstmt            ast.Stmt
	stmt_var_or_lets    ast.Stmt
	stmt_var            ast.Stmt
	stmt_lets           ast.Stmt
	stmt_if             ast.Stmt
	stmt_for            ast.Stmt
	stmt_switch         ast.Stmt
	stmt_switch_cases   ast.Stmt
	stmt_switch_case    ast.Stmt
	stmt_switch_default ast.Stmt
	stmts               ast.Stmt
	stmt                ast.Stmt
	exprs               []ast.Expr
	expr                ast.Expr
	map_expr            map[ast.Expr]ast.Expr
	expr_idents         []string
	expr_literals       ast.Expr
	expr_type           string
	tok                 ast.Token
	array_count         ast.ArrayCount
	expr_slice          ast.Expr
	expr_ident          ast.Expr
	expr_op             ast.Expr
	expr_unary          ast.Expr
	expr_binary         ast.Expr
	expr_lets           ast.Expr
	op_binary           ast.Operator
	op_comparison       ast.Operator
	op_add              ast.Operator
	op_multiply         ast.Operator
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const CASE = 57388
const DEFAULT = 57389
const GO = 57390
const CHAN = 57391
const MAKE = 57392
const OPCHAN = 57393
const TYPE = 57394
const LEN = 57395
const DELETE = 57396
const CLOSE = 57397
const UNARY = 57398

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"CASE",
	"DEFAULT",
	"GO",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"','",
	"';'",
	"'['",
	"']'",
	"'.'",
	"'!'",
	"'\\n'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:960

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	56, 72,
	74, 72,
	75, 5,
	-2, 1,
	-1, 23,
	74, 73,
	-2, 26,
	-1, 27,
	56, 72,
	-2, 61,
	-1, 62,
	56, 72,
	74, 72,
	-2, 5,
	-1, 115,
	16, 62,
	74, 62,
	-2, 107,
	-1, 136,
	1, 119,
	8, 119,
	46, 119,
	47, 119,
	56, 119,
	57, 119,
	70, 119,
	71, 119,
	73, 119,
	74, 119,
	75, 119,
	77, 119,
	80, 119,
	-2, 76,
	-1, 138,
	1, 121,
	8, 121,
	46, 121,
	47, 121,
	56, 121,
	57, 121,
	70, 121,
	71, 121,
	73, 121,
	74, 121,
	75, 121,
	77, 121,
	80, 121,
	-2, 76,
	-1, 245,
	77, 166,
	-2, 158,
	-1, 248,
	71, 166,
	-2, 158,
	-1, 263,
	1, 75,
	8, 75,
	46, 75,
	47, 75,
	56, 75,
	57, 75,
	71, 75,
	73, 75,
	74, 75,
	75, 75,
	77, 75,
	80, 75,
	-2, 76,
	-1, 264,
	1, 120,
	8, 120,
	46, 120,
	47, 120,
	56, 120,
	57, 120,
	70, 120,
	71, 120,
	73, 120,
	74, 120,
	75, 120,
	77, 120,
	80, 120,
	-2, 80,
	-1, 265,
	1, 122,
	8, 122,
	46, 122,
	47, 122,
	56, 122,
	57, 122,
	70, 122,
	71, 122,
	73, 122,
	74, 122,
	75, 122,
	77, 122,
	80, 122,
	-2, 80,
	-1, 271,
	1, 20,
	46, 20,
	47, 20,
	71, 20,
	75, 20,
	80, 20,
	-2, 89,
	-1, 273,
	1, 22,
	46, 22,
	47, 22,
	71, 22,
	75, 22,
	80, 22,
	-2, 91,
	-1, 303,
	71, 164,
	77, 164,
	-2, 159,
	-1, 319,
	1, 19,
	46, 19,
	47, 19,
	71, 19,
	75, 19,
	80, 19,
	-2, 88,
	-1, 320,
	1, 21,
	46, 21,
	47, 21,
	71, 21,
	75, 21,
	80, 21,
	-2, 90,
}

const yyPrivate = 57344

const yyLast = 3523

var yyAct = [...]int{

	66, 292, 293, 23, 29, 5, 246, 7, 82, 8,
	8, 202, 312, 1, 64, 67, 6, 248, 122, 81,
	117, 72, 63, 8, 295, 294, 111, 109, 112, 116,
	245, 304, 83, 84, 255, 123, 8, 313, 314, 254,
	80, 128, 254, 81, 76, 204, 79, 260, 206, 121,
	121, 120, 43, 133, 134, 135, 137, 139, 8, 203,
	136, 138, 190, 23, 80, 132, 65, 185, 76, 129,
	79, 64, 207, 315, 147, 148, 149, 150, 152, 153,
	310, 311, 156, 157, 144, 254, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	302, 361, 82, 272, 189, 270, 208, 251, 192, 342,
	320, 319, 243, 198, 183, 186, 201, 184, 132, 64,
	131, 257, 308, 155, 186, 300, 83, 84, 108, 105,
	106, 226, 279, 214, 119, 194, 395, 81, 132, 121,
	195, 210, 224, 124, 145, 213, 127, 215, 126, 125,
	74, 102, 103, 104, 107, 73, 394, 317, 80, 387,
	386, 384, 76, 196, 79, 301, 186, 200, 273, 132,
	271, 132, 252, 132, 209, 142, 230, 242, 186, 234,
	380, 237, 64, 379, 241, 375, 228, 374, 217, 218,
	373, 232, 372, 121, 249, 231, 227, 132, 121, 362,
	238, 262, 118, 247, 247, 263, 256, 258, 358, 354,
	352, 274, 244, 275, 351, 350, 278, 347, 324, 306,
	283, 280, 268, 318, 9, 266, 287, 289, 229, 216,
	296, 391, 143, 390, 365, 348, 341, 284, 340, 299,
	184, 307, 141, 70, 335, 64, 295, 294, 389, 385,
	269, 261, 303, 69, 210, 303, 309, 305, 282, 265,
	10, 264, 259, 203, 130, 154, 68, 57, 4, 2,
	58, 316, 62, 61, 59, 60, 51, 50, 49, 41,
	36, 331, 205, 334, 333, 323, 336, 140, 114, 325,
	326, 30, 328, 184, 197, 184, 343, 291, 121, 19,
	332, 64, 344, 339, 17, 345, 346, 16, 25, 24,
	3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 0, 0, 0,
	0, 353, 0, 355, 356, 0, 0, 184, 337, 359,
	0, 0, 0, 0, 363, 364, 0, 0, 0, 0,
	0, 0, 371, 0, 0, 0, 0, 382, 0, 0,
	383, 376, 0, 0, 377, 378, 0, 0, 0, 381,
	0, 0, 82, 93, 94, 98, 96, 92, 91, 0,
	0, 0, 0, 78, 0, 0, 0, 0, 85, 86,
	88, 89, 90, 87, 392, 393, 83, 84, 108, 105,
	106, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 77, 95, 97, 99, 100, 101,
	0, 102, 103, 104, 107, 0, 0, 0, 80, 368,
	369, 0, 76, 0, 79, 82, 93, 94, 98, 96,
	92, 91, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 85, 86, 88, 89, 90, 87, 0, 0, 83,
	84, 108, 105, 106, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 239, 77, 95, 97,
	99, 100, 101, 0, 102, 103, 104, 107, 0, 0,
	0, 80, 0, 0, 0, 76, 240, 79, 82, 93,
	94, 98, 96, 92, 91, 0, 0, 0, 0, 78,
	0, 0, 0, 0, 85, 86, 88, 89, 90, 87,
	0, 0, 83, 84, 108, 105, 106, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 222,
	77, 95, 97, 99, 100, 101, 0, 102, 103, 104,
	107, 0, 0, 0, 80, 0, 0, 0, 76, 223,
	79, 82, 93, 94, 98, 96, 92, 91, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 85, 86, 88,
	89, 90, 87, 0, 0, 83, 84, 108, 105, 106,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 77, 95, 97, 99, 100, 101, 0,
	102, 103, 104, 107, 0, 0, 0, 80, 219, 220,
	0, 76, 0, 79, 82, 93, 94, 98, 96, 92,
	91, 0, 0, 0, 0, 78, 0, 0, 0, 0,
	85, 86, 88, 89, 90, 87, 0, 0, 83, 84,
	108, 105, 106, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 0, 75, 0, 77, 95, 97, 99,
	100, 101, 0, 102, 103, 104, 107, 0, 187, 0,
	80, 0, 0, 0, 76, 0, 79, 82, 93, 94,
	98, 96, 92, 91, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 85, 86, 88, 89, 90, 87, 0,
	0, 83, 84, 108, 105, 106, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 77,
	95, 97, 99, 100, 101, 0, 102, 103, 104, 107,
	0, 0, 0, 80, 388, 0, 0, 76, 0, 79,
	82, 93, 94, 98, 96, 92, 91, 0, 0, 0,
	0, 78, 0, 0, 0, 0, 85, 86, 88, 89,
	90, 87, 0, 0, 83, 84, 108, 105, 106, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 77, 95, 97, 99, 100, 101, 0, 102,
	103, 104, 107, 0, 0, 0, 80, 370, 0, 0,
	76, 0, 79, 82, 93, 94, 98, 96, 92, 91,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 85,
	86, 88, 89, 90, 87, 0, 0, 83, 84, 108,
	105, 106, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 77, 95, 97, 99, 100,
	101, 0, 102, 103, 104, 107, 0, 0, 0, 80,
	367, 0, 0, 76, 0, 79, 82, 93, 94, 98,
	96, 92, 91, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 85, 86, 88, 89, 90, 87, 0, 0,
	83, 84, 108, 105, 106, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 366, 77, 95,
	97, 99, 100, 101, 0, 102, 103, 104, 107, 0,
	0, 0, 80, 0, 0, 0, 76, 0, 79, 82,
	93, 94, 98, 96, 92, 91, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 85, 86, 88, 89, 90,
	87, 0, 0, 83, 84, 108, 105, 106, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	360, 77, 95, 97, 99, 100, 101, 0, 102, 103,
	104, 107, 0, 0, 0, 80, 0, 0, 0, 76,
	0, 79, 82, 93, 94, 98, 96, 92, 91, 0,
	0, 0, 0, 78, 0, 0, 0, 0, 85, 86,
	88, 89, 90, 87, 0, 0, 83, 84, 108, 105,
	106, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 77, 95, 97, 99, 100, 101,
	0, 102, 103, 104, 107, 0, 357, 0, 80, 0,
	0, 0, 76, 0, 79, 82, 93, 94, 98, 96,
	92, 91, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 85, 86, 88, 89, 90, 87, 0, 0, 83,
	84, 108, 105, 106, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 77, 95, 97,
	99, 100, 101, 0, 102, 103, 104, 107, 0, 0,
	0, 80, 0, 0, 0, 76, 338, 79, 82, 93,
	94, 98, 96, 92, 91, 0, 0, 0, 0, 78,
	0, 0, 0, 0, 85, 86, 88, 89, 90, 87,
	0, 0, 83, 84, 108, 105, 106, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	77, 95, 97, 99, 100, 101, 0, 102, 103, 104,
	107, 0, 329, 0, 80, 0, 0, 0, 76, 0,
	79, 82, 93, 94, 98, 96, 92, 91, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 85, 86, 88,
	89, 90, 87, 0, 0, 83, 84, 108, 105, 106,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 77, 95, 97, 99, 100, 101, 0,
	102, 103, 104, 107, 0, 327, 0, 80, 0, 0,
	0, 76, 0, 79, 82, 93, 94, 98, 96, 92,
	91, 0, 0, 0, 0, 78, 0, 0, 0, 0,
	85, 86, 88, 89, 90, 87, 0, 0, 83, 84,
	108, 105, 106, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 77, 95, 97, 99,
	100, 101, 0, 102, 103, 104, 107, 0, 0, 0,
	80, 0, 0, 0, 76, 322, 79, 82, 93, 94,
	98, 96, 92, 91, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 85, 86, 88, 89, 90, 87, 0,
	0, 83, 84, 108, 105, 106, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 77,
	95, 97, 99, 100, 101, 0, 102, 103, 104, 107,
	0, 0, 0, 80, 321, 0, 0, 76, 0, 79,
	82, 93, 94, 98, 96, 92, 91, 0, 0, 0,
	0, 78, 0, 0, 0, 0, 85, 86, 88, 89,
	90, 87, 0, 0, 83, 84, 108, 105, 106, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 77, 95, 97, 99, 100, 101, 0, 102,
	103, 104, 107, 0, 0, 0, 80, 0, 0, 0,
	76, 298, 79, 82, 93, 94, 98, 96, 92, 91,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 85,
	86, 88, 89, 90, 87, 0, 0, 83, 84, 108,
	105, 106, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 77, 95, 97, 99, 100,
	101, 0, 102, 103, 104, 107, 0, 0, 0, 80,
	0, 0, 290, 76, 0, 79, 82, 93, 94, 98,
	96, 92, 91, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 85, 86, 88, 89, 90, 87, 0, 0,
	83, 84, 108, 105, 106, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 77, 95,
	97, 99, 100, 101, 0, 102, 103, 104, 107, 0,
	285, 0, 80, 0, 0, 0, 76, 0, 79, 82,
	93, 94, 98, 96, 92, 91, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 85, 86, 88, 89, 90,
	87, 0, 0, 83, 84, 108, 105, 106, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 77, 95, 97, 99, 100, 101, 0, 102, 103,
	104, 107, 0, 281, 0, 80, 0, 0, 0, 76,
	0, 79, 82, 93, 94, 98, 96, 92, 91, 0,
	0, 0, 0, 78, 0, 0, 0, 0, 85, 86,
	88, 89, 90, 87, 0, 0, 83, 84, 108, 105,
	106, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 77, 95, 97, 99, 100, 101,
	0, 102, 103, 104, 107, 0, 0, 0, 80, 0,
	0, 0, 76, 277, 79, 82, 93, 94, 98, 96,
	92, 91, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 85, 86, 88, 89, 90, 87, 0, 0, 83,
	84, 108, 105, 106, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 77, 95, 97,
	99, 100, 101, 0, 102, 103, 104, 107, 0, 267,
	0, 80, 0, 0, 0, 76, 0, 79, 82, 93,
	94, 98, 96, 92, 91, 0, 0, 0, 0, 78,
	0, 0, 0, 0, 85, 86, 88, 89, 90, 87,
	0, 0, 83, 84, 108, 105, 106, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	77, 95, 97, 99, 100, 101, 0, 102, 103, 104,
	107, 0, 0, 0, 80, 253, 0, 0, 76, 0,
	79, 82, 93, 94, 98, 96, 92, 91, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 85, 86, 88,
	89, 90, 87, 0, 0, 83, 84, 108, 105, 106,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 250, 77, 95, 97, 99, 100, 101, 0,
	102, 103, 104, 107, 0, 0, 0, 80, 0, 0,
	0, 76, 0, 79, 82, 93, 94, 98, 96, 92,
	91, 0, 0, 0, 0, 78, 0, 0, 0, 0,
	85, 86, 88, 89, 90, 87, 0, 0, 83, 84,
	108, 105, 106, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 77, 95, 97, 99,
	100, 101, 0, 102, 103, 104, 107, 0, 0, 0,
	80, 0, 0, 235, 76, 0, 79, 82, 93, 94,
	98, 96, 92, 91, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 85, 86, 88, 89, 90, 87, 0,
	0, 83, 84, 108, 105, 106, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 225, 77,
	95, 97, 99, 100, 101, 0, 102, 103, 104, 107,
	0, 0, 0, 80, 0, 0, 0, 76, 0, 79,
	82, 93, 94, 98, 96, 92, 91, 0, 0, 0,
	0, 78, 0, 0, 0, 0, 85, 86, 88, 89,
	90, 87, 0, 0, 83, 84, 108, 105, 106, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 77, 95, 97, 99, 100, 101, 0, 102,
	103, 104, 107, 0, 0, 0, 80, 221, 0, 0,
	76, 0, 79, 82, 93, 94, 98, 96, 92, 91,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 85,
	86, 88, 89, 90, 87, 0, 0, 83, 84, 108,
	105, 106, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 77, 95, 97, 99, 100,
	101, 0, 102, 103, 104, 107, 0, 0, 0, 80,
	199, 0, 0, 76, 0, 79, 82, 93, 94, 98,
	96, 92, 91, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 85, 86, 88, 89, 90, 87, 0, 0,
	83, 84, 108, 105, 106, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 77, 95,
	97, 99, 100, 101, 0, 102, 103, 104, 107, 0,
	191, 0, 80, 0, 0, 0, 76, 0, 79, 82,
	93, 94, 98, 96, 92, 91, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 85, 86, 88, 89, 90,
	87, 0, 0, 83, 84, 108, 105, 106, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 77, 95, 97, 99, 100, 101, 0, 102, 103,
	104, 107, 0, 182, 0, 80, 0, 0, 0, 76,
	0, 79, 82, 93, 94, 98, 96, 92, 91, 0,
	0, 0, 0, 78, 0, 0, 0, 0, 85, 86,
	88, 89, 90, 87, 0, 0, 83, 84, 108, 105,
	106, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 0, 75, 0, 77, 95, 97, 99, 100, 101,
	0, 102, 103, 104, 107, 0, 0, 0, 80, 0,
	0, 0, 76, 0, 79, 82, 93, 94, 98, 96,
	92, 91, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 85, 86, 88, 89, 90, 87, 0, 0, 83,
	84, 108, 105, 106, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 77, 95, 97,
	99, 100, 101, 0, 102, 103, 104, 107, 0, 0,
	0, 80, 0, 0, 0, 76, 0, 79, 82, 93,
	94, 98, 96, 92, 91, 0, 0, 0, 0, 78,
	0, 0, 0, 0, 85, 86, 88, 89, 90, 87,
	0, 0, 83, 84, 108, 105, 106, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	77, 95, 97, 99, 100, 101, 0, 102, 103, 104,
	107, 0, 0, 0, 80, 0, 0, 0, 76, 0,
	212, 82, 93, 94, 98, 96, 92, 91, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 85, 86, 88,
	89, 90, 87, 0, 0, 83, 84, 108, 105, 106,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 77, 95, 97, 99, 100, 101, 0,
	102, 103, 104, 107, 0, 0, 0, 80, 0, 0,
	0, 76, 0, 211, 82, 93, 94, 98, 96, 92,
	91, 0, 0, 0, 0, 78, 0, 0, 0, 0,
	85, 86, 88, 89, 90, 87, 0, 0, 83, 84,
	108, 105, 106, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 77, 95, 97, 99,
	100, 101, 0, 102, 103, 104, 107, 0, 0, 0,
	146, 0, 0, 0, 76, 0, 79, 35, 44, 45,
	0, 0, 31, 13, 42, 14, 26, 0, 27, 0,
	0, 0, 0, 0, 0, 0, 38, 46, 47, 48,
	0, 15, 18, 0, 0, 0, 0, 0, 0, 0,
	0, 11, 12, 0, 0, 0, 0, 0, 28, 0,
	0, 20, 0, 39, 40, 0, 37, 21, 22, 0,
	0, 0, 0, 0, 0, 52, 0, 54, 56, 0,
	0, 55, 0, 33, 0, 34, 0, 0, 0, 32,
	0, 0, 53, 82, 93, 94, 98, 96, 92, 91,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 84, 108,
	105, 106, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 77, 95, 97, 99, 100,
	101, 0, 102, 103, 104, 107, 0, 0, 0, 80,
	0, 0, 0, 76, 0, 79, 82, 93, 94, 98,
	96, 0, 91, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	83, 84, 108, 105, 106, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 0, 95,
	97, 99, 100, 101, 0, 102, 103, 104, 107, 0,
	0, 0, 80, 0, 0, 0, 76, 0, 79, 82,
	93, 94, 98, 96, 0, 0, 0, 0, 0, 0,
	0, 115, 44, 45, 0, 0, 31, 0, 42, 0,
	0, 0, 0, 83, 84, 108, 105, 106, 0, 0,
	38, 46, 47, 48, 81, 0, 0, 0, 0, 0,
	0, 0, 95, 97, 99, 100, 101, 0, 102, 103,
	104, 107, 0, 0, 0, 80, 0, 39, 40, 76,
	37, 79, 0, 0, 0, 0, 0, 0, 0, 52,
	0, 54, 56, 0, 0, 55, 0, 110, 0, 34,
	0, 0, 113, 32, 0, 0, 53, 35, 44, 45,
	0, 0, 31, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 46, 47, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 35, 44,
	45, 0, 0, 31, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 39, 40, 0, 37, 38, 46, 47,
	48, 0, 0, 0, 0, 52, 0, 54, 56, 0,
	0, 55, 0, 33, 0, 34, 0, 0, 0, 32,
	297, 0, 53, 0, 39, 40, 0, 37, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 54, 56,
	0, 0, 55, 0, 33, 0, 34, 35, 44, 45,
	32, 276, 31, 53, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 46, 47, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 35, 44,
	45, 0, 0, 31, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 39, 40, 0, 37, 38, 46, 47,
	48, 0, 0, 0, 0, 52, 0, 54, 56, 0,
	0, 55, 0, 33, 0, 34, 0, 0, 236, 32,
	0, 0, 53, 0, 39, 40, 0, 37, 0, 0,
	0, 193, 0, 0, 0, 0, 52, 0, 54, 56,
	0, 0, 55, 0, 33, 0, 34, 35, 44, 45,
	32, 0, 31, 53, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 46, 47, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 35, 44,
	45, 0, 0, 31, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 39, 40, 0, 37, 38, 46, 47,
	48, 0, 0, 0, 0, 52, 0, 54, 56, 0,
	0, 55, 0, 33, 0, 34, 0, 0, 188, 32,
	0, 0, 53, 0, 39, 40, 0, 37, 0, 0,
	0, 151, 0, 0, 0, 0, 52, 0, 54, 56,
	0, 0, 55, 0, 33, 0, 34, 35, 44, 45,
	32, 0, 31, 53, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 46, 47, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 35, 44,
	45, 0, 0, 31, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 39, 40, 0, 37, 38, 46, 47,
	48, 0, 0, 0, 0, 52, 0, 54, 56, 0,
	0, 55, 0, 33, 0, 34, 0, 0, 0, 32,
	0, 0, 53, 0, 39, 40, 0, 37, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 54, 56,
	0, 0, 55, 0, 330, 0, 34, 35, 44, 45,
	32, 0, 31, 53, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 46, 47, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 35, 44,
	45, 0, 0, 31, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 39, 40, 0, 37, 38, 46, 47,
	48, 0, 0, 0, 0, 52, 0, 54, 56, 0,
	0, 55, 0, 288, 0, 34, 0, 0, 0, 32,
	0, 0, 53, 0, 39, 40, 0, 37, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 54, 56,
	0, 0, 55, 0, 286, 0, 34, 35, 44, 45,
	32, 0, 31, 53, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 46, 47, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 44,
	45, 0, 0, 31, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 39, 40, 0, 37, 38, 46, 47,
	48, 0, 0, 0, 0, 52, 0, 54, 56, 0,
	0, 55, 0, 233, 0, 34, 0, 0, 0, 32,
	0, 0, 53, 0, 39, 40, 0, 37, 0, 0,
	82, 0, 0, 0, 0, 0, 52, 0, 54, 56,
	0, 0, 55, 0, 33, 0, 34, 0, 0, 0,
	32, 0, 0, 53, 83, 84, 108, 105, 106, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 101, 0, 102,
	103, 104, 107, 0, 0, 0, 80, 0, 0, 0,
	76, 0, 79,
}
var yyPact = [...]int{

	-70, -1000, 2583, -70, -1000, -71, -71, -1000, -1000, -1000,
	-1000, -1000, -1000, 3173, 3173, 272, 249, -1000, 183, -1000,
	3404, 93, 88, 2256, -1000, -1000, 3173, 2797, 3173, -56,
	-1000, 140, -71, -71, 3173, 81, -1000, 87, 86, 84,
	3173, -1000, 270, 74, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3173, 3173, 3173, 3173, 3173, -1000, -1000, -1000,
	-1000, -1000, 2583, -71, -1000, -9, 2319, 2319, 182, 172,
	-70, 82, 2508, 3173, 3173, 3173, 3104, 3173, 3173, 271,
	3173, 3173, 3173, -1000, -1000, 3173, 3173, 3173, 3173, 3173,
	3173, 3173, 3173, 3173, 3173, 3173, 3173, 3173, 3173, 3173,
	3173, 3173, 3173, 3173, 3173, 3173, 3173, 3173, 3173, 2193,
	-70, 51, 618, 3073, -13, 81, 2130, 3004, 270, 78,
	3173, -71, 3173, 2067, 3173, 3173, 269, -4, 2319, 60,
	-1000, 3173, -71, -32, -32, -32, -56, 2445, -56, 2382,
	-1000, -70, 3173, -70, 168, 3173, 3173, 555, 2004, 2319,
	492, 3173, 1941, 2647, -1000, 133, 2319, -8, 2319, 2319,
	2319, 2319, 2319, 2319, 2773, 2710, 3444, 3444, 3444, 3444,
	3444, 3444, 96, 96, 96, -8, -8, -8, -8, -8,
	-8, -8, -70, 167, -71, 3173, -71, -70, 3373, 1878,
	2973, -71, 429, 3173, 114, 270, -44, -57, 1815, -1000,
	109, 1752, -39, -1000, 269, 55, 268, -30, 3173, -9,
	3173, 267, 265, 164, 1689, 161, 230, 107, 105, -1000,
	3173, -1000, 2904, -1000, 1626, 3173, 69, -1000, 160, -1000,
	1563, 264, 159, -70, 1500, 3304, 3273, 1437, 210, 2873,
	-1000, 1374, 179, 62, 102, -71, -46, -71, -71, 158,
	3173, 59, -1000, -1000, 262, -1000, 7, -65, -36, -1,
	-1000, -9, 2319, -56, -1000, -1000, -1000, -70, -1000, 163,
	48, -1000, 47, -1000, 1311, 1248, -1000, -1000, 2647, -1000,
	-1000, -70, -1000, -1000, 157, -70, -70, 1185, -70, 1122,
	3204, -22, -1000, -1000, 197, 3173, 1059, -1000, -1000, -70,
	178, 176, 46, -71, -1000, 3173, -1000, 2319, -1000, -1000,
	-1000, 3173, -1000, -1000, 3173, 3173, 156, 175, -70, -1000,
	-1000, -1000, -1000, 154, -1000, 153, 149, -70, 148, -70,
	-70, 996, 147, -1000, -1000, -70, 933, 54, -1000, 138,
	-70, -70, 174, 870, 807, 366, 744, -1000, -70, 131,
	-1000, -1000, -1000, 129, -1000, 126, 124, -70, -1000, -1000,
	-70, -70, -1000, 122, 119, -70, 3173, -1000, -1000, 3173,
	-1000, 100, 228, -1000, -1000, -1000, 99, -1000, -1000, -1000,
	-1000, 98, 2319, 681, 227, 173, -1000, -1000, -1000, 171,
	-70, -70, 95, 75, -1000, -1000,
}
var yyPgo = [...]int{

	0, 13, 320, 234, 270, 319, 318, 317, 314, 309,
	307, 2, 1, 52, 0, 304, 26, 301, 11, 292,
	290, 4, 289, 288, 287, 286, 285, 284, 280, 277,
	279, 278, 18, 6, 16, 7,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 5,
	6, 6, 7, 7, 7, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 9, 10, 10, 10,
	10, 10, 11, 11, 12, 19, 19, 19, 15, 15,
	15, 16, 16, 16, 18, 18, 20, 20, 20, 20,
	20, 20, 13, 13, 13, 13, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 21, 17, 17,
	17, 17, 17, 22, 22, 22, 23, 23, 23, 23,
	23, 23, 23, 24, 24, 24, 24, 25, 25, 25,
	25, 25, 25, 25, 25, 26, 26, 27, 27, 27,
	27, 27, 27, 28, 28, 28, 29, 29, 29, 29,
	29, 29, 29, 30, 30, 31, 31, 31, 32, 32,
	34, 34, 35, 33, 33, 33, 33,
}
var yyR2 = [...]int{

	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 1, 1, 13, 12, 9, 8, 1, 6,
	5, 6, 5, 4, 6, 4, 1, 1, 1, 4,
	3, 3, 5, 7, 5, 4, 7, 5, 6, 7,
	7, 8, 7, 8, 8, 9, 7, 0, 1, 1,
	2, 2, 4, 4, 3, 0, 2, 3, 0, 3,
	6, 0, 1, 4, 1, 3, 6, 5, 5, 6,
	5, 5, 0, 1, 4, 4, 1, 1, 5, 3,
	3, 7, 8, 8, 9, 5, 5, 3, 5, 4,
	5, 4, 4, 4, 1, 4, 4, 5, 7, 5,
	7, 9, 7, 3, 2, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	4, 2, 4, 1, 1, 1, 1, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 2, 1, 1, 0, 1,
	1, 2, 1, 0, 2, 1, 1,
}
var yyChk = [...]int{

	-1000, -1, -30, -2, -31, 75, -34, -35, 80, -3,
	-4, 38, 39, 10, 12, 28, -7, -8, 29, -9,
	48, 54, 55, -14, -5, -6, 13, 15, 45, -21,
	-17, 9, 76, 70, 72, 4, -20, 53, 23, 50,
	51, -22, 11, -13, 5, 6, 24, 25, 26, -23,
	-24, -25, 62, 79, 64, 68, 65, -29, -28, -27,
	-26, -30, -31, -34, -35, -13, -14, -14, 4, 14,
	70, 4, -14, 72, 72, 56, 76, 58, 27, 78,
	72, 51, 16, 40, 41, 32, 33, 37, 34, 35,
	36, 22, 21, 17, 18, 59, 20, 60, 19, 61,
	62, 63, 65, 66, 67, 43, 44, 68, 42, -14,
	70, -16, -14, 75, -4, 4, -14, 76, 72, 4,
	-32, -34, -32, -14, 72, 72, 72, 72, -14, -16,
	4, 56, 74, -14, -14, -14, -21, -14, -21, -14,
	-3, 70, 13, 70, -1, 72, 72, -14, -14, -14,
	-14, 57, -14, -14, 4, -13, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, 70, -1, -34, 16, 74, 70, 75, -14,
	75, 70, -14, 57, -16, 72, -13, -15, -14, 73,
	-13, -14, -18, 4, 49, -19, 52, 76, 56, -13,
	-32, 78, 78, -1, -14, -1, 71, -13, -13, 73,
	74, 73, 57, 77, -14, 57, 8, 73, -1, 71,
	-14, -32, -1, 70, -14, 75, 75, -14, -32, 57,
	77, -14, 73, 8, -16, 74, -33, -34, 74, -33,
	57, 8, 73, 73, 78, 73, -18, 76, -18, 4,
	77, -13, -14, -21, 4, 4, 71, 70, 71, 30,
	8, 73, 8, 73, -14, -14, 77, 77, -14, 73,
	71, 70, 4, 71, -1, 70, 70, -14, 70, -14,
	75, -10, -12, -11, 47, 46, -14, 77, 77, 70,
	73, 73, 8, -34, 77, -32, 71, -14, 73, 4,
	73, 74, 77, 73, 74, 74, -1, 4, 70, 73,
	73, 73, 77, -1, 71, -1, -1, 70, -1, 70,
	70, -14, -32, -11, -12, 57, -14, -13, 77, -1,
	70, 70, 73, -14, -14, -14, -14, 71, 70, -1,
	71, 71, 71, -1, 71, -1, -1, 70, 71, -1,
	57, 57, 71, -1, -1, 70, 57, 73, 73, 74,
	73, -1, 71, 71, 71, 71, -1, -1, -1, 71,
	71, -1, -14, -14, 71, 31, 71, 71, 73, 31,
	70, 70, -1, -1, 71, 71,
}
var yyDef = [...]int{

	153, -2, -2, 153, 154, 157, 156, 160, 162, 3,
	6, 7, 8, 72, 0, 0, 12, 13, 0, 18,
	0, 0, 0, -2, 27, 28, 0, -2, 0, 76,
	77, 0, 158, 158, 0, 107, 94, 0, 0, 0,
	0, 106, 61, 0, 108, 109, 110, 111, 112, 113,
	114, 115, 0, 0, 0, 0, 0, 123, 124, 125,
	126, 2, -2, 155, 161, 9, 73, 10, 0, 0,
	153, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 127, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	153, 0, 73, 0, 0, -2, 0, 0, 61, 0,
	72, 159, 58, 0, 72, 0, 0, 55, 104, 0,
	62, 72, 158, 116, 117, 118, -2, 0, -2, 0,
	4, 153, 0, 153, 0, 72, 72, 0, 0, 30,
	0, 0, 0, 79, 80, 0, 103, 105, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 0, 156, 0, 158, 153, 0, 0,
	0, 158, 0, 0, 0, 61, 163, 163, 0, 87,
	0, 0, 0, 64, 0, 0, 0, 0, 72, 31,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 23,
	0, 25, 0, 93, 0, 0, 0, 91, 0, 35,
	0, 0, 0, 153, 0, 0, 0, 0, 47, 0,
	92, 0, 0, 0, 0, -2, 0, 165, -2, 0,
	0, 0, 89, 95, 0, 96, 0, 0, 0, 0,
	56, 29, 74, -2, -2, -2, 11, 153, 34, 0,
	0, -2, 0, -2, 0, 0, 70, 71, 78, 90,
	32, 153, 63, 37, 0, 153, 153, 0, 153, 0,
	0, 158, 48, 49, 0, 72, 0, 67, 68, 153,
	0, 0, 0, -2, 85, 0, 86, 59, 88, 65,
	97, 0, 57, 99, 0, 0, 0, 0, 153, -2,
	-2, 24, 69, 0, 38, 0, 0, 153, 0, 153,
	153, 0, 0, 50, 51, 153, 73, 0, 66, 0,
	153, 153, 0, 0, 0, 0, 0, 33, 153, 0,
	36, 39, 40, 0, 42, 0, 0, 153, 46, 54,
	153, 153, 81, 0, 0, 153, 0, 98, 100, 0,
	102, 0, 17, 41, 43, 44, 0, 52, 53, 82,
	83, 0, 60, 0, 16, 0, 45, 84, 101, 0,
	153, 153, 0, 0, 15, 14,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	80, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 67, 68, 3,
	72, 73, 65, 61, 74, 62, 78, 66, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 57, 75,
	59, 56, 60, 58, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 76, 3, 77, 64, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 70, 63, 71,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 69,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:96
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:100
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:106
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:115
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:131
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:135
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:139
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:144
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:149
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:154
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:159
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:164
		{
			yyVAL.stmt = yyDollar[1].stmt_if
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:168
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 14:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:172
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:177
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:182
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:187
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:192
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 19:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:196
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 20:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:201
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:206
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:211
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:216
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:221
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr, Key: yyDollar[5].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:226
		{
			yyVAL.stmt = &ast.CloseStmt{Expr: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:231
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:238
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:242
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:248
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:255
		{
			yyVAL.stmt_lets = &ast.LetsStmt{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{yyDollar[3].expr}}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:260
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{LHSS: yyDollar[1].exprs, RHS: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
			}
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:274
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:279
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			ifStmt.ElseIf = append(ifStmt.ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:284
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			if ifStmt.Else != nil {
				yylex.Error("multiple else statement")
			}
			ifStmt.Else = yyDollar[4].compstmt
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:294
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:299
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:310
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:315
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:320
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:325
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:330
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:335
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:340
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:345
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:350
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:357
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:366
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:370
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:374
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:378
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:384
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:395
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:400
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:407
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:412
		{
			yyVAL.array_count = ast.ArrayCount{Count: 0}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:416
		{
			yyVAL.array_count = ast.ArrayCount{Count: 1}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:420
		{
			yyVAL.array_count.Count = yyVAL.array_count.Count + 1
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:425
		{
			yyVAL.map_expr = make(map[ast.Expr]ast.Expr)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:429
		{
			mapExpr := make(map[ast.Expr]ast.Expr)
			mapExpr[yyDollar[1].expr] = yyDollar[3].expr
			yyVAL.map_expr = mapExpr
		}
	case 60:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:435
		{
			if len(yyDollar[1].map_expr) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyDollar[1].map_expr[yyDollar[4].expr] = yyDollar[6].expr
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:443
		{
			yyVAL.expr_idents = []string{}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:447
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:451
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:460
		{
			yyVAL.expr_type = yyDollar[1].tok.Lit
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:464
		{
			yyVAL.expr_type = yyVAL.expr_type + "." + yyDollar[3].tok.Lit
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:470
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:474
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:478
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:482
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:486
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:490
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:496
		{
			yyVAL.exprs = nil
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:500
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:504
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:511
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:520
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:524
		{
			yyVAL.expr = yyDollar[1].expr_literals
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:528
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, LHS: yyDollar[3].expr, RHS: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:533
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:538
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 81:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:543
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[6].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 82:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:548
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[7].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 83:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:553
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 84:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:558
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:563
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:568
		{
			yyVAL.expr = &ast.MapExpr{MapExpr: yyDollar[3].map_expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:573
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:578
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:583
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:588
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:593
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:598
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:603
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:608
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:613
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:618
		{
			yyVAL.expr = &ast.NewExpr{Type: yyDollar[3].expr_type}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:623
		{
			yyVAL.expr = &ast.MakeChanExpr{Type: yyDollar[4].expr_type, SizeExpr: nil}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 98:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:628
		{
			yyVAL.expr = &ast.MakeChanExpr{Type: yyDollar[4].expr_type, SizeExpr: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:633
		{
			yyVAL.expr = &ast.MakeExpr{Dimensions: yyDollar[3].array_count.Count, Type: yyDollar[4].expr_type}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 100:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:638
		{
			yyVAL.expr = &ast.MakeExpr{Dimensions: yyDollar[3].array_count.Count, Type: yyDollar[4].expr_type, LenExpr: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 101:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:643
		{
			yyVAL.expr = &ast.MakeExpr{Dimensions: yyDollar[3].array_count.Count, Type: yyDollar[4].expr_type, LenExpr: yyDollar[6].expr, CapExpr: yyDollar[8].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 102:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:648
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:653
		{
			yyVAL.expr = &ast.ChanExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:658
		{
			yyVAL.expr = &ast.ChanExpr{RHS: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:663
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:671
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:678
		{
			num, err := toNumber(yyDollar[1].tok.Lit)
			if err != nil {
				yylex.Error("invalid number: " + yyDollar[1].tok.Lit)
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:687
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: stringToValue(yyDollar[1].tok.Lit)}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:692
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: trueValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:697
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: falseValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:702
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: nilValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:714
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:719
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:724
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:729
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:734
		{
			yyVAL.expr = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:739
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:744
		{
			yyVAL.expr = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:751
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:756
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:761
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:766
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:773
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:781
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:789
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:797
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:805
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:813
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:821
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:829
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:839
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "&&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:844
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "||", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:851
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "==", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:856
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "!=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:861
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:866
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:871
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:876
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:883
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:888
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:893
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:900
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:905
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:910
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "%", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:915
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "<<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:920
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: ">>", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:925
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:930
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "**", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	}
	goto yystack /* stack new state and value */
}
